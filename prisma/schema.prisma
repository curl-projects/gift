generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  uniqueName String    @id
  email      String?   @unique
  name       String?
  concepts   Concept[]
  media      Media[]
  startColor String? @default("#1E4D60")
  endColor   String? @default("#101C3E")
  darkeningColors String[] @default(["#94DAF4", "#69A9E6", "#7F89D0"])
  covenants Covenant[]
  entries Entry[]
  friendshipsInitiated Friendship[] @relation("User1Friendship")
  friendshipsReceived  Friendship[] @relation("User2Friendship")
}

enum FriendshipStatus {
  UNINITIATED
  ENTRY_CREATED
  ENTRY_PLACED
  CONVERSING
}

model Friendship {
  user1Id String
  user2Id String
  user1   User   @relation("User1Friendship", fields: [user1Id], references: [uniqueName])
  user2   User   @relation("User2Friendship", fields: [user2Id], references: [uniqueName])
  createdAt DateTime @default(now())
  user1Status FriendshipStatus
  user2Status FriendshipStatus

  @@id([user1Id, user2Id])
  @@unique([user2Id, user1Id])
}

model Entry {
  id          String   @id @default(uuid())
  content     String
  userId      String
  user        User     @relation(fields: [userId], references: [uniqueName])
  conceptId   String?
  concept     Concept? @relation(fields: [conceptId], references: [id])
  excerptId   String?
  excerpt     Excerpt? @relation(fields: [excerptId], references: [id])
  date        DateTime @default(now())
}

model Concept {
  id          String        @id @default(uuid())
  title       String
  description String?
  userId      String
  user        User          @relation(fields: [userId], references: [uniqueName])
  linkedEnd   ConceptLink[] @relation("linkedEnd")
  linkedStart ConceptLink[] @relation("linkedStart")
  excerpts    Excerpt[]
  entries     Entry[]
}

model Excerpt {
  id        String  @id @default(uuid())
  content   String
  conceptId String
  mediaId   String
  entries     Entry[]
  concept   Concept @relation(fields: [conceptId], references: [id])
  media     Media  @relation(fields: [mediaId], references: [id])
}

model Media {
  id         String       @id @default(uuid())
  type       String
  date       DateTime?   @default(now())
  url        String
  title      String?      @default("Untitled")
  content    String?      @default("Media content")
  userId     String?
  annotations Annotation[]
  excerpts    Excerpt[]
  user       User?        @relation(fields: [userId], references: [uniqueName])
}


// OLD DATA MODELLING

enum CovenantType {
  CONNECT_TO_OWN_WORK
  CONNECT_TO_FOUND_ITEM
  CONNECT_TO_INTERESTING_PERSON
  ATTACH_NOVEL_THOUGHT
}

model Covenant {
  id String @id @default(uuid())
  ownerId String
  owner User @relation(fields: [ownerId], references: [uniqueName])
  covenantType CovenantType
  modifiers CovenantModifier[]
  times Int @default(1)
  params Json?
}

enum ModifierCategory {
  AND
  WITH
}

enum ModifierType {
  JUSTIFY
  FEWER_WORDS
  MORE_WORDS
}

model CovenantModifier {
  id String @id @default(uuid())
  covenantId String
  covenant Covenant @relation(fields: [covenantId], references: [id])
  modifierCategory ModifierCategory
  modifier ModifierType
  params Json?
}

model ConceptLink {
  linkedStartId String
  linkedEndId   String
  strength      Float   @default(1.0)
  linkedEnd     Concept @relation("linkedEnd", fields: [linkedEndId], references: [id])
  linkedStart   Concept @relation("linkedStart", fields: [linkedStartId], references: [id])

  @@id([linkedStartId, linkedEndId])
}

model Annotation {
  id      String @id @default(uuid())
  annotationType    String @default("glyph")
  content String
  glyph   String @default("")
  mediaId String
  fromPos Int
  toPos   Int
  media   Media  @relation(fields: [mediaId], references: [id])
}